import java.util.Arrays;
import java.util.Random;

public class DistantSampler {

	/**
	 * Generate a rectangular matrix of random uniform data in the range [0, 1) for a given number of vectors, the number of dimensions of each vectors, and a random number seed. 
	 * Each row of the matrix is uniformly random vector of the given number of dimensions.
	 * @param numPoints the given number of data vectors
	 * @param dimensions the given number of dimensions per vector
	 * @param seed random number seed for data generation
	 * @return a rectangular matrix of random uniform data in the range [0, 1) for a given number of vectors, the number of dimensions of each vectors, and a random number seed
	 */
	public static double[][] generateUniformData(int numPoints, int dimensions, long seed) {
		Random random = new Random(seed);
		double[][] data = new double[numPoints][dimensions];
		for (int i = 0; i < numPoints; i++)
			for (int j = 0; j < dimensions; j++)
				data[i][j] = random.nextDouble();
		return data;
	}
	
	/**
	 * @param data a rectangular matrix in which each row is a data vector
	 * @param numSamples the number of vector samples to be selected from the given data
	 * @return a DistantSampleState optimized for these parameters using no more than 10000 iterations.  For
	 * the data set generated by <code>generateUniformData(100, 2, 0L)</code>, your median energy should be 
	 * less than 132.
	 */
	public static DistantSamplerState sample(double[][] data, int numSamples) {
	    // TODO - Implement.
	    return null;
	}
	
	@SuppressWarnings("unused")
	private static void computeMedian(int trials) {
		double[] energies = new double[trials];
		for (int i = 0; i < trials; i++) {
			energies[i] = sample(generateUniformData(100, 2, 0L), 10).energy();
		}
		Arrays.sort(energies);
		System.out.println("Median energy: " + energies[trials / 2]);
	}
	
	/**
	 * Generate data using <code>generateUniformData(100, 2, 0L)</code>, create a DistantSamplerState with this
	 * data for 10 samples, optimize with sample(), print the resulting state, print the energy, 
	 * and visualize the result in text.
	 * @param args (not used)
	 */
	public static void main(String[] args) {
		double[][] data = generateUniformData(100, 2, 0L);
		DistantSamplerState state = sample(data, 10);
		System.out.println(state);
		System.out.println("Energy: " + state.energy());
		
		// Visualize solution in text.
		int size = 20;
		char[][] grid = new char[size][size];
		for (int i = 0; i < size; i++)
			for (int j = 0; j < size; j++)
				grid[i][j] = ' ';
		for (double[] datum : data)
			grid[(int) (datum[0] * size)][(int) (datum[1] * size)] = '+';
		for (int i : state.getSampleIndices())
			grid[(int) (data[i][0] * size)][(int) (data[i][1] * size)] = '@';
		for (int i = 0; i < size; i++)
			for (int j = 0; j < size; j++)
				System.out.print("" + grid[i][j] + (j == size - 1 ? '\n' : ' '));

//		computeMedian(1000); // should be under 132.0 median for 10000 iterations and given data
	}

}